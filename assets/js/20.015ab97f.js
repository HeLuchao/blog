(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{165:function(n,s,t){"use strict";t.r(s);var e=t(0),i=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this.$createElement,s=this._self._c||n;return s("div",{staticClass:"content"},[s("p",[this._v("#前端性能优化")]),this._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v('1.CSS方面：\n多个css合并，尽量减少HTTP请求\n将css文件放在页面最上面\n移除空的css规则\n避免使用CSS表达式\n选择器优化嵌套，尽量避免层级过深\n充分利用css继承属性，减少代码量\n抽象提取公共样式，减少代码量\n属性值为0时，不加单位\n属性值为小于1的小数时，省略小数点前面的0\ncss雪碧图\n2.js方面：\n遵循严格模式："use strict";\n将js脚本放在页面底部，加快渲染页面\n将js脚本将脚本成组打包，减少请求\n使用非阻塞方式下载js脚本\n尽量使用局部变量来保存全局变量\n尽量减少使用闭包\n使用 window 对象属性方法时，省略 window\n尽量减少对象成员嵌套\n缓存 DOM 节点的访问\n通过避免使用 eval() 和 Function() 构造器\n给 setTimeout() 和 setInterval() 传递函数而不是字符串作为参数\n尽量使用直接量创建对象和数组\n最小化重绘(repaint)和回流(reflow)\n3.综合：\n减少http请求次数：cssspirit,data uri JS\nCSS源码压缩 前端模板JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数 \n用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能 \n用setTimeout来避免页面失去响应 \n用hash-table来优化查找 \n当需要设置的样式很多时设置className而不是直接操作style 少用全局变量 \n缓存DOM节点查找的结果 \n避免使用CSS Expression \n图片预载 \n避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢\n')])])])])}],!1,null,null,null);i.options.__file="前端性能优化.md";s.default=i.exports}}]);